/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package startpage;

import ejb.ConsultationListRemote;
import ejb.ReparationsListRemote;
import entities.Consultation;
import entities.Reparations;
import java.awt.BorderLayout;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.swing.DefaultListModel;
import javax.swing.JTextField;

/**
 *
 * @author mejan
 */
public class Schedule extends javax.swing.JPanel {


    /**
     * Creates new form Schedule
     */
    DefaultListModel listModel = new DefaultListModel();
    DefaultListModel listModel2 = new DefaultListModel();
    List<Reparations> reparationsList=lookupReparationsListRemote().getReparations();;
    List<Consultation> consultationList;
    List<Consultation> consultationList1;
    public Schedule() {
        
        
        initComponents();
        reparationsList=lookupReparationsListRemote().getReparations();
        
        curRepBox.setSelected(true);
        curRepBox.doClick();
        /*for(Consultation con: lookupConsultationListRemote().getConsultationByAccepted(false)){
            Date d = new Date();
            
            if(con.getDate().before(d)){
                lookupConsultationListRemote().removeConsultation(con);
            }
        }*/
        
        consultationList = lookupConsultationListRemote().getConsultationByAccepted(false);
        consultationList1 = lookupConsultationListRemote().getConsultationByAccepted(true);
        
          
        
            for(Consultation con : consultationList1) {
                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                DateFormat dateFormat1 = new SimpleDateFormat("HH:mm");
                Date d =con.getDate();
                String datestring = dateFormat.format(d);
                Date t=con.getTime();
                String timestring =dateFormat1.format(t);
               
                listModel.addElement(con.getCustomerID().getName() + " " + con.getCustomerID().getLastName() + ", " +con.getDay() + ", " + con.getTimeInterval());
                
                
            }
            selectConsultationList.setModel(listModel);
          
        
            
        NewConsultationButton.setVisible(false);
        
        for(Consultation keso : consultationList) {
            
            NewConsultationButton.setVisible(true);
            
        }
        
        
        informationLabel.setVisible(false);
        
       
            
    }


    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        AddButton = new javax.swing.JButton();
        changeButton = new javax.swing.JButton();
        NewConsultationButton = new javax.swing.JButton();
        informationLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        finRepBox = new javax.swing.JCheckBox();
        curRepBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        reparationList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectConsultationList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        descripionArea = new javax.swing.JTextArea();

        setMaximumSize(new java.awt.Dimension(700, 521));
        setPreferredSize(new java.awt.Dimension(700, 521));

        AddButton.setText("Lägg till ärende");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        changeButton.setText("Redigera ärende");
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });

        NewConsultationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/startpage/Utropstecken.png"))); // NOI18N
        NewConsultationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewConsultationButtonActionPerformed(evt);
            }
        });

        informationLabel.setForeground(new java.awt.Color(255, 0, 0));
        informationLabel.setText("Välj ett ärende i listan för att redigera");

        jLabel1.setText("Uppkommande konsultationer:");

        jLabel2.setText("Ärenden:");

        buttonGroup1.add(finRepBox);
        finRepBox.setText("Avslutade ärenden");
        finRepBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finRepBoxActionPerformed(evt);
            }
        });

        buttonGroup1.add(curRepBox);
        curRepBox.setText("Aktuella ärenden");
        curRepBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                curRepBoxActionPerformed(evt);
            }
        });

        reparationList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(reparationList);

        selectConsultationList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        selectConsultationList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                selectConsultationListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(selectConsultationList);

        descripionArea.setColumns(20);
        descripionArea.setRows(5);
        jScrollPane3.setViewportView(descripionArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(informationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(changeButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(33, 33, 33)
                                        .addComponent(NewConsultationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(finRepBox)
                                            .addComponent(curRepBox))))))
                        .addGap(0, 203, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(curRepBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(finRepBox)
                                .addGap(15, 15, 15))
                            .addComponent(jScrollPane3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NewConsultationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddButton)
                    .addComponent(changeButton))
                .addGap(18, 18, 18)
                .addComponent(informationLabel)
                .addGap(385, 385, 385))
        );

        AddButton.getAccessibleContext().setAccessibleName("LaggTillButton");
        changeButton.getAccessibleContext().setAccessibleName("RedigeraButton");

        getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
           
          
          //  this.setVisible(false);
            SelectConsultation hej = new SelectConsultation();
            
            removeAll();
            setLayout(new BorderLayout());
            add(hej, BorderLayout.CENTER);
            validate();
            repaint();
           
            
           
           
          
    }//GEN-LAST:event_AddButtonActionPerformed

    private void NewConsultationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewConsultationButtonActionPerformed
            NewConsultation nc = new NewConsultation();// TODO add your handling code here:
           
          
            
            
            removeAll();
            setLayout(new BorderLayout());
            add(nc, BorderLayout.CENTER);
            validate();
            repaint();
    }//GEN-LAST:event_NewConsultationButtonActionPerformed

    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
    
        if(reparationList.isSelectionEmpty()){
           // informationLabel.setVisible(true);
            return;
        }
        ChangeReparation cr = new ChangeReparation(reparationsList.get(reparationList.getAnchorSelectionIndex()));// TODO add your handling code here:
        removeAll();
        setLayout(new BorderLayout());
        add(cr, BorderLayout.CENTER);
        validate();   
   
    }//GEN-LAST:event_changeButtonActionPerformed

    private void curRepBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_curRepBoxActionPerformed
        
        listModel2.removeAllElements();
        if(!reparationsList.isEmpty()){
            reparationsList.clear();
        }
        for(Reparations rep : lookupReparationsListRemote().getReparations()){
            System.out.println(rep.getCustomerID().getName() + "   " + rep.getDone() + "   " +rep.getRecieved());
            if(!rep.isIsFinished()){
                listModel2.addElement(rep.getCustomerID().getName() + " " + rep.getCustomerID().getLastName());
                reparationsList.add(rep);
                System.out.println(rep.getCustomerID().getName() +" ej avslutat");
            }
        }
            reparationList.setModel(listModel2);            // TODO add your handling code here:
    }//GEN-LAST:event_curRepBoxActionPerformed

    private void finRepBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finRepBoxActionPerformed
        if(!reparationsList.isEmpty()){
            reparationsList.clear();
        }
        listModel2.removeAllElements();
        for(Reparations rep : lookupReparationsListRemote().getReparations()){
            System.out.println(rep.getDone() + "   " +rep.getRecieved());
            if(rep.isIsFinished()){
                
                listModel2.addElement(rep.getCustomerID().getName() + " " + rep.getCustomerID().getLastName());
                reparationsList.add(rep);
                System.out.println(rep.getCustomerID().getName() +" avslutat");
            }
        }
            reparationList.setModel(listModel2); // TODO add your handling code here:
    }//GEN-LAST:event_finRepBoxActionPerformed

    private void selectConsultationListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_selectConsultationListValueChanged
        System.out.println(selectConsultationList.getAnchorSelectionIndex());
        String name = consultationList1.get(selectConsultationList.getAnchorSelectionIndex()).getCustomerID().getName();
        String lastname = consultationList1.get(selectConsultationList.getAnchorSelectionIndex()).getCustomerID().getLastName();
        String description = consultationList1.get(selectConsultationList.getAnchorSelectionIndex()).getDescription();
        String phone = consultationList1.get(selectConsultationList.getAnchorSelectionIndex()).getCustomerID().getPhoneNumber();
        String email = consultationList1.get(selectConsultationList.getAnchorSelectionIndex()).getCustomerID().getEmail();
        descripionArea.setText(name + " " + lastname + "\n" + phone + "\n" + email + "\n" + "\n" + description);       // TODO add your handling code here:
    }//GEN-LAST:event_selectConsultationListValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton NewConsultationButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton changeButton;
    private javax.swing.JCheckBox curRepBox;
    private javax.swing.JTextArea descripionArea;
    private javax.swing.JCheckBox finRepBox;
    private javax.swing.JLabel informationLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList reparationList;
    private javax.swing.JList selectConsultationList;
    // End of variables declaration//GEN-END:variables

    private ConsultationListRemote lookupConsultationListRemote() {
        try {
            Context c = new InitialContext();
            return (ConsultationListRemote) c.lookup("java:comp/env/ConsultationList");
        } catch (NamingException ne) {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, "exception caught", ne);
            throw new RuntimeException(ne);
        }
    }

    private ReparationsListRemote lookupReparationsListRemote() {
        try {
            Context c = new InitialContext();
            return (ReparationsListRemote) c.lookup("java:comp/env/ReparationsList");
        } catch (NamingException ne) {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, "exception caught", ne);
            throw new RuntimeException(ne);
        }
    }

 


}
