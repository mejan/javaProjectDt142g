/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package webAdminPage;

import com.sun.awt.AWTUtilities;
import ejb.GuitarsListRemote;
import ejb.NewGuitarsRemote;
import entities.Guitars;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import static webAdminPage.FileUtils.decodeToImage;

/**
 *
 * @author mejan
 */
public class WebbAdmin extends javax.swing.JPanel {
    int p=3;
    int i=0;
    int k=0;
    /**
     * Creates new form WebbAdmin
     */
    public WebbAdmin() {
        initComponents();
     //   pictHolder.setSize(600, p*200);
       // pictHolder.setPreferredSize(null);
        
        test.setSize(600, p*67);
         pictHolder.setPreferredSize(test);
        this.picData();
        this.readImages();
     
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        laddaUpp = new javax.swing.JButton();
        modifyButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        pictHolder = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 102, 153), 3));

        laddaUpp.setText("Ladda upp bild");
        laddaUpp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laddaUppActionPerformed(evt);
            }
        });

        modifyButton.setText("Modifiera");
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Ta Bort");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(619, 1002));

        pictHolder.setBackground(new java.awt.Color(248, 248, 248));
        pictHolder.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pictHolder.setPreferredSize(new java.awt.Dimension(600, 1000));
        jScrollPane2.setViewportView(pictHolder);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(laddaUpp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(modifyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laddaUpp)
                    .addComponent(modifyButton)
                    .addComponent(deleteButton))
                .addGap(43, 43, 43))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void laddaUppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_laddaUppActionPerformed
       
        picInfo.setAdminWindow(this);
       picInfo.createPicInfo();
       picInfo.removeImage();
    }//GEN-LAST:event_laddaUppActionPerformed

    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        picInfo.setAdminWindow(this);
       /* for(int j=0; j<pics.length; j++){
            if(pics[j].getCheckBox().isSelected() && pics[j].getCecked()==true){
                picInfo.createPicInfo();
                
                //picInfo.modifyPics(pics[j].getPic(), pics[j].getCheckBox().getText(), pics[j].getDesc(), true, pics[j].getPrice(),pics[j].getSold(),pics[j].getImgDb(), pics[j].getImgPath());
         */
         List<Guitars> guitarsList1 = guitarsListRemote.getGuitarsForDesktop();
       int j=0;
        for(Guitars it: guitarsList1){
            String s = new String(it.getImage());
            BufferedImage image=decodeToImage(s);
            //System.out.println(s);
            
            ImageIcon imageicon = new ImageIcon(image);
            Image scaledImage = imageicon.getImage().getScaledInstance(170, 170, Image.SCALE_DEFAULT);
            imageicon = new ImageIcon(scaledImage);
            
            if(pics[j].getCheckBox().isSelected() && pics[j].getCecked()==true){
                picInfo.createPicInfo();
                String price = Integer.toString(it.getPrice());
                picInfo.modifyPics(imageicon,it.getName(),it.getDescription(),price,it.getSold(),it.getImage(),it.getImagePath());
            }
            j++;
            }
        

    }//GEN-LAST:event_modifyButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        picInfo.setAdminWindow(this);
        
        this.deletePics();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void readImages(){
        String totext;
        for(Guitars it: guitarsList){
            String s = new String(it.getImage());
            BufferedImage image=decodeToImage(s);
            //System.out.println(s);
            
            ImageIcon imageicon = new ImageIcon(image);
            Image scaledImage = imageicon.getImage().getScaledInstance(170, 170, Image.SCALE_DEFAULT);
            imageicon = new ImageIcon(scaledImage);
            String price = Integer.toString(it.getPrice());
            
                 this.addPic(imageicon, it.getName(), it.getDescription(), price,it.getSold(), it.getImage(), it.getImagePath());
            
                
           
        }
        
        
    }
    
    
    
    public void addPic(ImageIcon a,String b,String c,String d, Boolean issold , byte [] imgdb, String imgpath){
        k=0;
        while(k<pics.length){
            if(pics[k].getCecked()==false){
                pics[k].setInfo(a, b, c,true,d,issold, imgdb, imgpath);
                counter++;
                
                if(counter%3 == 0){
                    test.setSize(600, p*67+counter*67);
                    pictHolder.setPreferredSize(test);
                    this.addPicsSize();
                    this.picData();
                }
                    break;
            }
            k++;  
        }
    }
    
    
    public void modifyPic(ImageIcon a, String b, String c,String d, Boolean issold,byte [] imgdb, String imgpath) throws IOException{
        /*for(int j=0; j<pics.length; j++){
            if(pics[j].getCheckBox().isSelected()&&pics[j].getCecked()==true){
                picInfo.createPicInfo();
                 pics[j].setInfo(a, b, c,true,d,issold, imgdb, imgpath);
            }
        }^*/
        
        int j=0;
        List<Guitars> guitarsList1 = guitarsListRemote.getGuitarsForDesktop();
        for(Guitars it: guitarsList1){
            String s = new String(it.getImage());
            BufferedImage image=decodeToImage(s);
            //System.out.println(s);
            
            ImageIcon imageicon = new ImageIcon(image);
            Image scaledImage = imageicon.getImage().getScaledInstance(170, 170, Image.SCALE_DEFAULT);
            imageicon = new ImageIcon(scaledImage);
            //String price = Integer.toString(it.getPrice());
            int price = Integer.parseInt(d);
            if(pics[j].getCheckBox().isSelected() && pics[j].getCecked()==true){
                picInfo.createPicInfo();
               
                pics[j].setInfo(a, b, c,true,d,issold, imgdb, imgpath);
               // image, descriptionText, pictureName,priceF,issold, imgdb, imgPath
                
                
                it.setDescription(c);
                System.out.println("Desc "+c+" PRIS: ");
                it.setName(b);
                System.out.println(price);
                it.setPrice(price);
                it.setSold(issold);
                it.setImage(imgdb);
                it.setImagePath(imgpath);
                guitarsListRemote.updateGuitar(it);
                 
            }
            j++;
        }
    }
    
    public void picData(){
        for(int i=counter; i<pics.length; i++){
            pics[i] = new PicBox();
            pics[i].setAdminWindow(this);
            pictHolder.add(pics[i]);
        }
        this.updateUI();
    }
    
    
    private void sort(){
        
        for(int j=0; j<pics.length; j++){
            if(j+1 < pics.length && pics[j].getCecked()!=true && pics[j+1].getCecked()==true){
                temp = pics[j+1];
                pics[j].setInfo(temp.getPic(), temp.getPicName(), temp.getDesc(), temp.getCecked(),temp.getPrice(),temp.getSold(),temp.getImgDb(), temp.getImgPath());
                pics[j+1].removeImage();
            }
        }
    }
    
    private void addPicsSize(){
        PicBox [] testpics = new PicBox[pics.length];
        
        for(int j=0; j<pics.length; j++){
            testpics[j] = pics[j];
        }
        
        pics = new PicBox[counter+3];
        for(int j=0; j<testpics.length; j++){
            pics[j] = testpics[j];
        }
      
    }
    
    
    private void removePicsSize(){
        PicBox [] testpics = new PicBox[pics.length-3];
        
        for(int j=0; j<testpics.length; j++){
            testpics[j] = pics[j];
        }
        
        pics = new PicBox[pics.length-3];
        for(int j=0; j<testpics.length; j++){
            pics[j] = testpics[j];
        }
    }
    
    
    private void deletePics(){
        int j=0;
       // for(int j=0; j<pics.length; j++){
              
        List<Guitars> guitarsList1 = guitarsListRemote.getGuitarsForDesktop();
        for(Guitars it: guitarsList1){
            
            if(pics[j].getCheckBox().isSelected() && pics[j].getCecked()==true){
                int a=JOptionPane.showConfirmDialog(this, "Är du säker på att du vill ta bort: "+pics[j].getPicName(),"Är du säker?",JOptionPane.YES_NO_OPTION);
                if(a==0){
                    Guitars toBeRemove ;
                    toBeRemove=it;
                    pics[j].removeImage();
                    guitarsListRemote.removeGuitars(it);
                    
                    this.sort();  
                    if(counter%3==0 ){
                        
                        test.setSize(600, p*67+counter*67-3*67);
                         pictHolder.setPreferredSize(test);
                         int k=0;
                         int g=pics.length-1;
                         
                         while(k!=3){
                             k++;
                             pictHolder.remove(pics[g]);
                             g--;
                         }
                         this.removePicsSize();
                    }
                    counter--; 
                    break;
                }   
                
            } 
            j++;
        } 
        
    }
    
    
    public void actionPerformed(ActionEvent e){
        System.out.print("TESTAR");
    
    }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton laddaUpp;
    private javax.swing.JButton modifyButton;
    private javax.swing.JPanel pictHolder;
    // End of variables declaration//GEN-END:variables
    PicBox [] pics = new PicBox[p];
    
   private PicInfo picInfo = new PicInfo();
  // private PicBox picBox = new PicBox();
    ArrayList<PicBox> picBoxes;
    int counter=0;
    PicBox temp = new PicBox();
      Dimension test = new Dimension();
      GuitarsListRemote guitarsListRemote = lookupGuitarsListRemote();
        List<Guitars> guitarsList = guitarsListRemote.getGuitarsForDesktop();
        
    private GuitarsListRemote lookupGuitarsListRemote() {
        try {
            Context c = new InitialContext();
            return (GuitarsListRemote) c.lookup("java:comp/env/GuitarsList");
        } catch (NamingException ne) {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, "exception caught", ne);
            throw new RuntimeException(ne);
        }
    }

    private NewGuitarsRemote lookupNewGuitarsRemote() {
        try {
            Context c = new InitialContext();
            return (NewGuitarsRemote) c.lookup("java:comp/env/NewGuitars");
        } catch (NamingException ne) {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, "exception caught", ne);
            throw new RuntimeException(ne);
        }
    }
      
    

}


